// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: currencies.sql

package db

import (
	"context"
)

const createCurrency = `-- name: CreateCurrency :one
INSERT INTO currencies (
    currency_string
) VALUES ($1) RETURNING id, currency_string, currency_name, starter
`

func (q *Queries) CreateCurrency(ctx context.Context, currencyString string) (Currency, error) {
	row := q.db.QueryRowContext(ctx, createCurrency, currencyString)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.CurrencyString,
		&i.CurrencyName,
		&i.Starter,
	)
	return i, err
}

const deleteAllCurrencies = `-- name: DeleteAllCurrencies :exec
DELETE FROM currencies
`

func (q *Queries) DeleteAllCurrencies(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCurrencies)
	return err
}

const getCurrencyByCurrencyString = `-- name: GetCurrencyByCurrencyString :one
SELECT id, currency_string, currency_name, starter FROM currencies WHERE currency_string = $1
`

func (q *Queries) GetCurrencyByCurrencyString(ctx context.Context, currencyString string) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyByCurrencyString, currencyString)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.CurrencyString,
		&i.CurrencyName,
		&i.Starter,
	)
	return i, err
}

const getCurrencyByID = `-- name: GetCurrencyByID :one
SELECT id, currency_string, currency_name, starter FROM currencies WHERE id = $1
`

func (q *Queries) GetCurrencyByID(ctx context.Context, id int64) (Currency, error) {
	row := q.db.QueryRowContext(ctx, getCurrencyByID, id)
	var i Currency
	err := row.Scan(
		&i.ID,
		&i.CurrencyString,
		&i.CurrencyName,
		&i.Starter,
	)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT id, currency_string, currency_name, starter FROM currencies ORDER BY id
LIMIT $1 OFFSET $2
`

type ListCurrenciesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCurrencies(ctx context.Context, arg ListCurrenciesParams) ([]Currency, error) {
	rows, err := q.db.QueryContext(ctx, listCurrencies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Currency{}
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.ID,
			&i.CurrencyString,
			&i.CurrencyName,
			&i.Starter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
